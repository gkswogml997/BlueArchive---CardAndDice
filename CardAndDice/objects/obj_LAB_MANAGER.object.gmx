<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_system_invisible_object_sprite</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//콘솔
console_default = "명령어"
console_default2 = 1001
combination_table = ds_map_find_value(obj_GAME_SYSTEM_MANAGER.gacha_table,"enemy_combination_P0")
combination_number = 0
str = ""

//UI
instance_create(x,y,obj_log_button)

//적 덱 초기화
var e_list = obj_GAME_SYSTEM_MANAGER.enemy_list
for (var i = 0; i &lt; ds_list_size(e_list); i++)
{
    if !is_undefined(e_list[|i]) {instance_destroy(e_list[|i])}
    e_list[|i] = undefined 
}
//아군 덱 초기화
var p_list = obj_GAME_SYSTEM_MANAGER.player_list
for (var i = 0; i &lt; ds_list_size(p_list); i++)
{
    if !is_undefined(p_list[|i])
    {
        instance_destroy(p_list[|i])
        p_list[|i] = undefined
    }
}

//적 덱에 카드 삽입
//repeat(5) {add_enemy_card(90003)}
instance_create_v(x,y,obj_battle_background,"Street1")

global.game_phase = phase.battle

var p_list = obj_GAME_SYSTEM_MANAGER.player_list

//로그 초기화
ds_list_clear(global.game_log_list)
ds_queue_clear(global.quick_log_buffer)
send_log("실험실에 오신것을 환영합니다.",true)
send_log("(스페이스바)를 눌러 실험실 콘솔을 열 수있습니다.",true)
send_log("자세한 명령어는 콘솔에서 '명령어'를 입력하여 확인해주세요.",true)

for(var i = 0; i &lt; global.p_list_max; i++)
{
    if !is_undefined(p_list[|i]) {
        instance_activate_object(p_list[|i])
        //턴 인스턴트 초기화 
        global.turn_instance = undefined
        //미니모드로
        p_list[|i].mini_mode = true
        //휘발성 스텟 초기화
        p_list[|i].volatility_attack_power = 0
        p_list[|i].volatility_defence_power = 0
        p_list[|i].volatility_rapid_power = 0
        p_list[|i].volatility_taunt_power = 0
        p_list[|i].volatility_skill_level = -1
        //취약 중첩 초기화
        p_list[|i].number_of_hits = 0
        p_list[|i].stack_of_weakness = 0
        p_list[|i].weakness_def = 0
        //디버프 초기화
        p_list[|i].flower_divination = false
        p_list[|i].fire_debuff = false
        p_list[|i].good_stamp = false
        p_list[|i].is_stun = false
        p_list[|i].energy_charge = 0
        p_list[|i].dodge_chance = 0
        p_list[|i].is_fear = false
    }   
}

//퀵버튼 생성
instance_create(x,y,obj_lab_button_drawer)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//쓰래기통을 재활용 합니다.
while(!ds_stack_empty(global.instance_recycle_bin))
{
    var ins = ds_stack_pop(global.instance_recycle_bin)
    if instance_exists(ins) {instance_destroy(ins)}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if str ="명령어"
{
    send_log("명령어 - 명령어를 확인합니다.",true)
    send_log("페이즈 시작 - 실험실 세팅이 완료되고 전투를 시작할때 1회만 입력해주세요.",true)
    send_log("실험실 초기화 - 실험실 세팅을 초기화 합니다.",true)
    send_log("실험실 퇴장 - 타이틀로 돌아갑니다.",true)
    send_log("학생 코드- 학생들의 내부 코드를 보여줍니다. 세부 로그에서 확인하세요.",true)
    send_log("아군 추가 - 아군 덱에 학생을 추가합니다.",true)
    send_log("적 추가 - 적 덱에 학생을 추가합니다.",true)
    send_log("아군 덱 비우기 - 아군 덱을 비웁니다.",true)
    send_log("적 덱 비우기 - 적 덱을 비웁니다.",true)
    send_log("허수아비 세우기 - 적 덱을 비우고 허수아비를 채워넣습니다.",true)
    send_log("json 다시읽기 - 수정된 json 파일을 다시 읽습니다.",true)
    send_log("꽉 채우고 시작 - 양쪽 덱에 학생을 꽉 채우고 페이즈를 시작합니다.",true)
    send_log("임시 버프 - 적 / 아군에게 설정한 만큼 버프를 줍니다.",true)
    send_log("강제 턴넘김 - 턴을 강제로 넘깁니다. (버그가 발생 할 수있음)",true)
    send_log("조합 페이즈 지정 - 적 조합을 불러올 페이즈를 지정합니다.", true)
    send_log("다음 조합 - 다음 조합을 불러옵니다.",true)
    send_log("이전 조합 - 이전 조합을 불러옵니다.",true)
    send_log("적 조합 불러오기 - 적 조합과 맵을 불러옵니다.",true)
    send_log("소환 - 적에게 대상을 소환해줍니다.",true)
    send_log("",true)
} 

if str = "페이즈 시작"
{
    instance_create(0,0,obj_battle_turn_manager)
}
if str = "실험실 초기화"
{
    //죽은 카드들 제거
    var p_list = obj_GAME_SYSTEM_MANAGER.player_list
    var e_list = obj_GAME_SYSTEM_MANAGER.enemy_list
    for (var i = 0; i &lt; ds_list_size(p_list); i++)
    {
        if !is_undefined(p_list[|i])
        {
            if p_list[|i].is_dead = true
            {
                instance_destroy(p_list[|i])
                p_list[|i] = undefined
            }
        }
        if !is_undefined(e_list[|i])
        {
            if e_list[|i].is_dead = true
            {
                instance_destroy(e_list[|i])
                e_list[|i] = undefined
            }
        }
    }
    //소환물 제거
    for(var i = 0; i &lt; ds_list_size(p_list); i++)
    {
        if !is_undefined(p_list[|i])
        {
            if p_list[|i].is_summon
            {
                instance_destroy(p_list[|i])
                p_list[|i] = undefined
            }
        }
    }
    instance_deactivate_object(obj_character_card)
    instance_destroy()
    instance_destroy(obj_battle_turn_manager)
    instance_destroy(obj_lab_button_drawer)
    instance_create(0,0,obj_LAB_MANAGER)
    audio_stop_all()
    
}
if str = "실험실 퇴장"
{
    global.lab_mode = false
    room_goto(rm_lobby)
}
if str = "학생 코드"
{
    var sorting_list = ds_list_create()
    var name_map = obj_GAME_SYSTEM_MANAGER.character_sheet_map
    var key = ds_map_find_first(name_map)
    for(var i = 0; i &lt; ds_map_size(name_map); i++)
    {
        ds_list_add(sorting_list, real(key))
        key = ds_map_find_next(name_map,key)
    }
    ds_list_sort(sorting_list,true)
    for(var i = 0; i &lt; ds_list_size(sorting_list); i++)
    {
        var sort_key = string(sorting_list[|i])
        var character_data = ds_map_find_value(name_map,sort_key)
        var hangul_name = ds_map_find_value(character_data,"hangul_name")
        send_log(sort_key + " - " + hangul_name)
    }
    ds_list_destroy(sorting_list)

}
if str = "아군 추가"
{
    var str2 = get_integer("학생 코드를 입력해주세요.",console_default2)
    add_player_card(str2)
    send_log("아군 덱에 학생 추가",true)
    console_default2 = str2
}
if str = "적 추가"
{
    var str2 = get_integer("학생 코드를 입력해주세요.",console_default2)
    add_enemy_card(str2)
    send_log("적 덱에 학생 추가",true)
    console_default = str2
}
if str = "아군 덱 비우기"
{
    var p_list = obj_GAME_SYSTEM_MANAGER.player_list
    for (var i = 0; i &lt; ds_list_size(p_list); i++)
    {
        if !is_undefined(p_list[|i])
        {
            instance_destroy(p_list[|i])
            p_list[|i] = undefined
        }
    }
}
if str = "적 덱 비우기"
{
    var e_list = obj_GAME_SYSTEM_MANAGER.enemy_list
    for (var i = 0; i &lt; ds_list_size(e_list); i++)
    {
        if !is_undefined(e_list[|i])
        {
            instance_destroy(e_list[|i])
            e_list[|i] = undefined
        }
    }
}

if str = "허수아비 세우기"
{
    var e_list = obj_GAME_SYSTEM_MANAGER.enemy_list
    for (var i = 0; i &lt; ds_list_size(e_list); i++)
    {
        if !is_undefined(e_list[|i])
        {
            instance_destroy(e_list[|i])
            e_list[|i] = undefined
        }
    }
    repeat(5) {add_enemy_card(90003)}
}

if str = "json 다시읽기"
{
    obj_GAME_SYSTEM_MANAGER.json_reread = true
    
}
if str = "꽉 채우고 시작"
{
    var str2 = get_integer("학생 코드를 입력해주세요.",console_default2)
    repeat(5) {add_player_card(str2)}
    repeat(5) {add_enemy_card(str2)}
    send_log("덱에 학생 추가",true)
    instance_create(0,0,obj_battle_turn_manager)
    console_default2 = str2
}
if str = "임시 버프"
{
    var p_list = obj_GAME_SYSTEM_MANAGER.player_list
    var e_list = obj_GAME_SYSTEM_MANAGER.enemy_list
    var str2 = get_string("어느 덱을에 버프를 줍니까? (아군/적)","적");
    var str3 = get_string("어느 스텟에 버프를 줍니까? (공격력/방어력/신속/도발/숙련도)","신속");
    var str4 = get_integer("얼마만큼 줍니까?",100);
    for (var i = 0; i &lt; ds_list_size(p_list); i++)
    {
        if str2 = "아군"
        {
            if !is_undefined(p_list[|i])
            {
                if !p_list[|i].is_dead {card_stat_change(p_list[|i],str3,str4)}
            }
        }else
        {
            if !is_undefined(e_list[|i])
            {
                if !e_list[|i].is_dead {card_stat_change(e_list[|i],str3,str4)}
            }
        }
    }
}
if str = "강제 턴넘김"
{
    turn_end()
}
if str = "조합 페이즈 지정"
{
    var str2 = get_string("몇 페이즈의 조합을 불러올까요?","");
    if str2 = "1" {combination_table = ds_map_find_value(obj_GAME_SYSTEM_MANAGER.gacha_table,"enemy_combination_P1")}
    if str2 = "2" {combination_table = ds_map_find_value(obj_GAME_SYSTEM_MANAGER.gacha_table,"enemy_combination_P2")}
    if str2 = "3" {combination_table = ds_map_find_value(obj_GAME_SYSTEM_MANAGER.gacha_table,"enemy_combination_P3")}
    if str2 = "boss" {combination_table = ds_map_find_value(obj_GAME_SYSTEM_MANAGER.gacha_table,"boss_combination")}
    send_log("현재 페이즈는 "+str2+"입니다.",true)
}
if str = "다음 조합"
{
    combination_number++
    str = "적 조합 불러오기"
}
if str = "이전 조합"
{
    combination_number--
    str = "적 조합 불러오기"
}
if str = "적 조합 불러오기"
{
    //조합이 들어갈 자리 만들기
    var e_list = obj_GAME_SYSTEM_MANAGER.enemy_list
    for (var i = 0; i &lt; ds_list_size(e_list); i++)
    {
        if !is_undefined(e_list[|i])
        {
            instance_destroy(e_list[|i])
            e_list[|i] = undefined
        }
    }
    instance_destroy(obj_battle_turn_manager)
    
    
    //적조합 소환
    combination_number = clamp(combination_number,0,ds_list_size(combination_table)-1)
    var background = "Street1"
    var table_list = combination_table[| combination_number]
    for(var i = 0; i &lt;ds_list_size(table_list); i++)
    {
        if is_string(table_list[|i])
        {
            background = table_list[|i]
        }else
        {
            if table_list[|i] != -4 {add_enemy_card(table_list[| i],i)}
        }
    }
    if instance_exists(obj_battle_background) {instance_destroy(obj_battle_background)}
    instance_create_v(x,y,obj_battle_background,background)
    send_log(string(combination_number)+"번 조합을 소환했습니다.",true)
}
if str = "소환"
{
    var str2 = get_integer("누구를 소환 할까요?", 90007)
    summon_card(str2,true)
}
console_default = str
str = ""
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>str = get_string("실험실 콘솔 '명령어'를 입력하면 사용 할 수 있는 명령어를 확인 할 수 있습니다.",console_default);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
