<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_skill_card</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1003</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//초기화
skill_number = -1
skill_name = "unidentified skill"
skill_icon_spr = spr_icon_skill_undefined;
skill_description = "this skill is not activate"
is_passive_skill = false
is_targeting_skill = false
extra_description = "undefined"

skill_number = ct_argument[0]

//스킬정보 읽어오기
var skill_data = search_skill(skill_number)
if !is_undefined(skill_data)
{
    skill_name = ds_map_find_value(skill_data,"skill_name")
    skill_icon_spr = asset_get_index("spr_icon_"+ds_map_find_value(skill_data,"skill_icon"))
    if asset_get_index("spr_icon_"+ds_map_find_value(skill_data,"skill_icon")) = -1 {skill_icon_spr = spr_icon_skill_undefined;}
    skill_description = ds_map_find_value(skill_data,"skill_description")
    is_passive_skill = ds_map_find_value(skill_data,"passive_skill")
    is_targeting_skill = ds_map_find_value(skill_data,"is_targeting_skill")
    if !is_undefined(ds_map_find_value(skill_data,"extra_description"))
    {
        extra_description = ds_map_find_value(skill_data,"extra_description")
    }
}

//객체의 주인
owner_id = ct_argument[1];

//상태변수
mini_mode = true
passive_trigger = false
target = undefined

//스프라이트
depth = -1001
skill_icon_background = spr_skill_icon_background
if !is_targeting_skill {skill_icon_background = spr_skill_icon_background_non_targeting}
if is_passive_skill {skill_icon_background = spr_skill_icon_background_passive}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !is_undefined(skill_slot) {instance_destroy(skill_slot)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.game_phase = phase.battle
{
    //주인과 미니모드 상태를 공유
    mini_mode = owner_id.mini_mode
    depth = owner_id.depth-1
    
    if passive_trigger and !owner_id.is_dead
    {   
        send_log(owner_id.hangul_name+"의 패시브 "+skill_name+" 발동", true)
        use_skill()
        //말풍선
        var speech_bubble_place = sprite_get_height(spr_mini_card)/2 + 64
        if owner_id.is_enemy {speech_bubble_place *= -1}
        instance_create_v(owner_id.x,owner_id.y-speech_bubble_place,obj_skill_speech_bubble,skill_name)
        passive_trigger = false
        instance_deactivate_object(id)
    }
    
    //주인과 활성화 비활성화 상태를 공유
    if !instance_exists(owner_id) 
    {
        instance_deactivate_object(id)
    }
}else if global.game_phase = phase.cafe {}
else if global.game_phase = phase.craft_chamber {}
else
{
    //주인과 활성화 비활성화 상태를 공유
    if !instance_exists(owner_id) 
    {
        instance_deactivate_object(id)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.game_phase = phase.battle
{
    if !owner_id.is_enemy and !is_passive_skill and global.turn_instance = owner_id
    {
        instance_create_v(x,y,obj_skill_handler,
                                owner_id,
                                skill_number,
                                skill_name,
                                is_targeting_skill,
                                is_passive_skill,
                                extra_description)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
depth = owner_id.depth-1
if mini_mode
{   
    if global.game_phase = phase.battle {if owner_id.is_dead {depth = 1}}
    var xx = x - sprite_width/2 + sprite_get_width(spr_skill_icon_background)/2 + 12
    draw_self()
    draw_sprite(skill_icon_background,0,xx,y)
    draw_sprite_ext(skill_icon_spr,0,xx,y,0.26,0.26,0,c_white,image_alpha)
    draw_set_font(ft_gyeonggi_sz15_Italic_Light)
    draw_set_halign(fa_center)
    draw_set_valign(fa_middle)
    draw_set_color(c_black)
    draw_text(x,y,skill_name)
    mask_index = spr_mask_noone
}else
{
    if global.game_phase = phase.battle
    {
        x = owner_id.x+sprite_get_width(spr_card)/2
        y = owner_id.y-sprite_get_height(spr_card)/2 + (sprite_get_height(spr_large_skill_card) * ds_list_find_index(owner_id.skill_list,id))
    }
    
    draw_sprite(spr_large_skill_card,0,x,y)
    draw_sprite(skill_icon_background,0,x+16,y+16)
    draw_sprite_ext(skill_icon_spr,0,x+16,y+16,0.26,0.26,0,c_white,image_alpha)
    draw_set_font(ft_gyeonggi_sz15_Italic_Light)
    draw_set_halign(fa_center)
    draw_set_valign(fa_middle)
    draw_set_color(c_black)
    draw_text(x+16+92,y+16,skill_name)
    draw_text_ext(x+100,y+80,skill_description,24,200)
    mask_index = spr_mask_200x145
    
    if extra_description != "undefined" and global.game_phase = phase.battle
    {
        var xx = x-sprite_get_width(spr_card)
        var yy = y 
        draw_sprite(spr_skill_extra_description,0,xx,yy)
        draw_set_font(ft_gyeonggi_sz15_Italic_Light)
        draw_set_halign(fa_center)
        draw_set_valign(fa_middle)
        
        var xx2 = xx - 125
        var yy2 = yy + 24
        var yy3 = yy + 80
        if extra_description = "must_hit"
        {
            draw_set_color(c_white)
            draw_text(xx2,yy2,"필중")
            draw_set_color(c_black)
            draw_text_ext(xx2,yy3,"숙련도에 관계없이 무조건 명중합니다.",24,250)
        }
        if extra_description = "passive"
        {
            draw_set_color(c_white)
            draw_text(xx2,yy2,"패시브")
            draw_set_color(c_black)
            draw_text_ext(xx2,yy3,"페이즈가 시작 될 때마다 시전됩니다. 직접 사용 할 수 없습니다.",24,250)
        }
        if extra_description = "critical"
        {
            draw_set_color(c_white)
            draw_text(xx2,yy2,"치명타")
            draw_set_color(c_black)
            draw_text_ext(xx2,yy3,"최종 데미지가 2배로 계산되어 들어갑니다.",24,250)
        }
        if extra_description = "extra_turn"
        {
            draw_set_color(c_white)
            draw_text(xx2,yy2,"엑스트라 턴")
            draw_set_color(c_black)
            draw_text_ext(xx2,yy3,"신속과 관계없이 마지막에 추가 턴을 받습니다.",24,250)
        }
        if extra_description = "stun"
        {
            draw_set_color(c_white)
            draw_text(xx2,yy2,"기절")
            draw_set_color(c_black)
            draw_text_ext(xx2,yy3,"대상의 이번 페이즈의 턴을 스킵합니다.",24,250)
        }
        if extra_description = "summon"
        {
            draw_set_color(c_white)
            draw_text(xx2,yy2,"소환")
            draw_set_color(c_black)
            draw_text_ext(xx2,yy3,"빈 슬롯에 소환물 카드를 놓습니다. 빈 자리가 없으면 소환되지 않습니다.",24,250)
        }
        if extra_description = "stamp"
        {
            draw_set_color(c_white)
            draw_text(xx2,yy2,"칭찬도장")
            draw_set_color(c_black)
            draw_text_ext(xx2,yy3,"칭찬도장이 이미 찍혀있으면 스킬 효과가 두배가 됩니다.",24,250)
        }
        if extra_description = "opening"
        {
            draw_set_color(c_white)
            draw_text(xx2,yy2,"오프닝")
            draw_set_color(c_black)
            draw_text_ext(xx2,yy3,"전투가 시작할때 1회 발동합니다.",24,250)
        }
        if extra_description = "barrier"
        {
            draw_set_color(c_white)
            draw_text(xx2,yy2,"보호막")
            draw_set_color(c_black)
            draw_text_ext(xx2,yy3,"취약 히트카운트가 3에서 5로 증가합니다. 취약을 얻으면 제거됩니다.",24,250)
        }
        if extra_description = "flower_divination"
        {
            draw_set_color(c_white)
            draw_text(xx2,yy2,"꽃점")
            draw_set_color(c_black)
            draw_text_ext(xx2,yy3,"대상의 턴이 시작될때 지속중에 준 피해를 합하여 입힙니다.",24,250)
        }
        if extra_description = "fire"
        {
            draw_set_color(c_white)
            draw_text(xx2,yy2,"화상")
            draw_set_color(c_black)
            draw_text_ext(xx2,yy3,"화상에 걸린 대상은 턴을 시작할때 D6의 데미지를 받습니다.",24,250)
        }
        if extra_description = "test"
        {
            draw_set_color(c_white)
            draw_text(xx2,yy2,"테스트")
            draw_set_color(c_black)
            draw_text_ext(xx2,yy3,"테스트용 스킬입니다.",24,250)
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
