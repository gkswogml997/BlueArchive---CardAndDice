<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_skill_card</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1003</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//초기화
skill_number = -1
skill_name = "unidentified skill"
skill_icon_spr = spr_icon_skill_undefined;
skill_description = "this skill is not activate"
is_passive_skill = false
is_targeting_skill = false

//패시브 스킬 설계를 병신같이 한 탓에 누더기로 붙여놓은 변수
//늘 보면서 반성하고 성찰하는 시간을 갖도록 합시다.
original_skill_card = id
multi_target_stack = ds_stack_create()

//추가 효과가 있는 스킬용 변수
extra_description = "undefined"
extra_skill_target = undefined

//논타켓 스킬용 변수
nontarget_skill_target = undefined
is_base_on_me_skill = false
is_enemy_target = undefined

//공격 스킬용 변수
is_attack_skill = false
use_attack_power_skill = false
dice = 1
attack_count = 1

skill_number = ct_argument[0]

//스킬정보 읽어오기
var skill_data = search_skill(skill_number)
if !is_undefined(skill_data)
{
    skill_name = ds_map_find_value(skill_data,"skill_name")
    skill_icon_spr = asset_get_index("spr_icon_"+ds_map_find_value(skill_data,"skill_icon"))
    if asset_get_index("spr_icon_"+ds_map_find_value(skill_data,"skill_icon")) = -1 {skill_icon_spr = spr_icon_skill_undefined;}
    skill_description = ds_map_find_value(skill_data,"skill_description")
    is_passive_skill = ds_map_find_value(skill_data,"passive_skill")
    is_targeting_skill = ds_map_find_value(skill_data,"is_targeting_skill")
    if !is_undefined(ds_map_find_value(skill_data,"extra_description"))
    {
        extra_description = ds_map_find_value(skill_data,"extra_description")
    }
    if !is_undefined(ds_map_find_value(skill_data,"extra_skill_target"))
    {
        extra_skill_target = ds_map_find_value(skill_data,"extra_skill_target")
    }
    if !is_undefined(ds_map_find_value(skill_data,"nontarget_skill_target"))
    {
        nontarget_skill_target = ds_map_find_value(skill_data,"nontarget_skill_target")
        is_enemy_target = ds_map_find_value(skill_data,"is_enemy_target")
    }
    if !is_undefined(ds_map_find_value(skill_data,"is_base_on_me_skill"))
    {
        is_base_on_me_skill = ds_map_find_value(skill_data,"is_base_on_me_skill")
    }
    if !is_undefined(ds_map_find_value(skill_data,"is_attack_skill"))
    {
        is_attack_skill = ds_map_find_value(skill_data,"is_attack_skill")
        use_attack_power_skill = ds_map_find_value(skill_data,"use_attack_power_skill")
        dice = ds_map_find_value(skill_data,"dice")
        attack_constant = ds_map_find_value(skill_data,"attack_constant")
        attack_count = ds_map_find_value(skill_data,"attack_count")
    }
}
//스킬 키워드 정보 읽기
keyword_name = undefined
keyword_description = undefined

var keyword = search_extra_description(extra_description)
if !is_undefined(keyword)
{
    keyword_name = ds_map_find_value(keyword,"keyword_name")
    keyword_description = ds_map_find_value(keyword,"keyword_description")
}

//객체의 주인
owner_id = ct_argument[1];

//상태변수
mini_mode = true
passive_trigger = false
target = undefined

//스프라이트
depth = -1001
skill_icon_background = spr_skill_icon_background
if !is_targeting_skill {skill_icon_background = spr_skill_icon_background_non_targeting}
if is_passive_skill {skill_icon_background = spr_skill_icon_background_passive}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_stack_destroy(multi_target_stack)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.game_phase = phase.battle
{
    //주인과 미니모드 상태를 공유
    mini_mode = owner_id.mini_mode
    depth = owner_id.depth-1
    
    if passive_trigger and !owner_id.is_dead
    {   
        send_log(owner_id.hangul_name+"의 패시브 "+skill_name+" 발동", true)
        use_skill()
        ds_queue_enqueue(owner_id.skill_speech_bubble_buffer,skill_name)
        passive_trigger = false
        instance_deactivate_object(id)
    }
    
    //주인과 활성화 비활성화 상태를 공유
    if !instance_exists(owner_id) 
    {
        instance_deactivate_object(id)
    }
}else if global.game_phase = phase.cafe {}
else if global.game_phase = phase.craft_chamber {}
else
{
    //주인과 활성화 비활성화 상태를 공유
    if !instance_exists(owner_id) 
    {
        instance_deactivate_object(id)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.game_phase = phase.battle
{
    if !owner_id.is_enemy and !is_passive_skill and global.turn_instance = owner_id
    {
        instance_create_v(x,y,obj_skill_handler,owner_id,id)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
depth = owner_id.depth-1
if mini_mode
{   
    var xx = x - sprite_width/2 + sprite_get_width(spr_skill_icon_background)/2 + 12
    if global.game_phase = phase.battle
    {
        if !owner_id.is_dead 
        {
            draw_self()
            draw_sprite(skill_icon_background,0,xx,y)
            draw_sprite_ext(skill_icon_spr,0,xx,y,0.26,0.26,0,c_white,image_alpha)
            draw_set_font(ft_gyeonggi_sz15_Italic_Light)
            draw_set_halign(fa_center)
            draw_set_valign(fa_middle)
            draw_set_color(c_black)
            draw_text(x,y,skill_name)
        }
    }else
    {
        draw_self()
        draw_sprite(skill_icon_background,0,xx,y)
        draw_sprite_ext(skill_icon_spr,0,xx,y,0.26,0.26,0,c_white,image_alpha)
        draw_set_font(ft_gyeonggi_sz15_Italic_Light)
        draw_set_halign(fa_center)
        draw_set_valign(fa_middle)
        draw_set_color(c_black)
        draw_text(x,y,skill_name)
    }
    mask_index = spr_mask_noone
}else
{
    if global.game_phase = phase.battle
    {
        x = owner_id.x+sprite_get_width(spr_card)/2
        y = owner_id.y-sprite_get_height(spr_card)/2 + (sprite_get_height(spr_large_skill_card) * ds_list_find_index(owner_id.skill_list,id))
    }
    
    draw_sprite(spr_large_skill_card,0,x,y)
    draw_sprite(skill_icon_background,0,x+16,y+16)
    draw_sprite_ext(skill_icon_spr,0,x+16,y+16,0.26,0.26,0,c_white,image_alpha)
    draw_set_font(ft_gyeonggi_sz15_Italic_Light)
    draw_set_halign(fa_center)
    draw_set_valign(fa_middle)
    draw_set_color(c_black)
    draw_text(x+16+92,y+16,skill_name)
    draw_text_ext(x+100,y+80,skill_description,24,200)
    mask_index = spr_mask_200x145
    
    //예상 공격력
    if is_attack_skill and global.game_phase = phase.battle
    {
        if mouse_enter()
        {
            var xx = x + sprite_width + sprite_get_width(spr_damage_predictive_ui)/2
            var yy = y + sprite_get_height(spr_damage_predictive_ui)/2
            draw_set_font(ft_gyeonggi_sz16_Bold)
            draw_set_halign(fa_center)
            draw_set_valign(fa_middle)
            draw_set_color(c_white)
            draw_sprite(spr_damage_predictive_ui,0,xx,yy)
            
            var owner_attack_power = owner_id.attack_power + owner_id.additional_attack_power + owner_id.volatility_attack_power
            var min_damage = owner_attack_power * attack_constant
            var max_damage = owner_attack_power * dice * attack_constant
            if !use_attack_power_skill
            {
                min_damage = attack_constant
                max_damage = dice * attack_constant
            }
            
            var str = "";
            if extra_description = "critical"
            {
                min_damage *= 2
                max_damage *= 2
                str += "[치명타 적용됨]#"
            }
            if owner_id.energy_charge &gt; 0
            {
                str += "[에너지 충전] +"+string(owner_id.energy_charge*6)+"#"
            }
            
            str +="데미지 범위#"+string(min_damage)+" ~ "+string(max_damage)+"#"+string(attack_count)+"회"
            
            draw_text_outline(xx,yy,str,2,c_black,16)
        }
    }
    
    //엑스트라 효과 텍스트
    if extra_description != "undefined" and global.game_phase = phase.battle
    {
        var xx = x-sprite_get_width(spr_card)
        var yy = y 
        draw_sprite(spr_skill_extra_description,0,xx,yy)
        draw_set_font(ft_gyeonggi_sz15_Italic_Light)
        draw_set_halign(fa_center)
        draw_set_valign(fa_middle)
        
        var xx2 = xx - 125
        var yy2 = yy + 24
        var yy3 = yy + 85
        draw_set_color(c_white)
        draw_text(xx2,yy2,keyword_name)
        draw_set_color(c_black)
        draw_text_ext(xx2,yy3,keyword_description,24,250)
        
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
