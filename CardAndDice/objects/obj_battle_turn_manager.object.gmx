<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_system_invisible_object_sprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turn_queue = ds_queue_create()

//순서 UI용 리스트
spr_list = ds_list_create()

//리스트 병합
all_list = make_list_of_all_cards()

//신속 순서 대로 큐에 삽입
var all_list_size = ds_list_size(all_list)

for(var i = 0; i &lt; all_list_size; i++)
{
    var min_rapid_instance = all_list[| 0]
    var min_rapid = all_list[| 0].rapid_power + all_list[| 0].additional_rapid_power + all_list[| 0].volatility_rapid_power

    for (var j = 0; j &lt; ds_list_size(all_list); j++)
    {
        var target_rapid = all_list[| j].rapid_power + all_list[| j].additional_rapid_power + all_list[| j].volatility_rapid_power
        if target_rapid &gt;= min_rapid
        {
            min_rapid_instance = all_list[|j]
            min_rapid = target_rapid
        }
    }
    //죽은 카드가 아닐경우 순서에 포함
    if !min_rapid_instance.is_dead
    {
        ds_queue_enqueue(turn_queue,min_rapid_instance)
        ds_list_add(spr_list,min_rapid_instance)
    }
    ds_list_delete(all_list,ds_list_find_index(all_list,min_rapid_instance))
}
ds_list_destroy(all_list)

//패시브 스킬 발동
passive_list = make_list_of_all_cards()
for(var i = 0; i &lt; ds_list_size(passive_list); i++)
{
    for(var j = 0; j &lt; 3; j++)
    {
        if !is_undefined(passive_list[|i].skill_list[|j])
        {
            if passive_list[|i].skill_list[|j].is_passive_skill
            {
                passive_list[|i].skill_list[|j].passive_trigger = true
            }
        }
    }
}
ds_list_destroy(passive_list)

//페이즈 시작 로그
send_log("새로운 페이즈 시작",true)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_queue_destroy(turn_queue)
ds_list_destroy(spr_list)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//턴 종료시
if global.turn_instance != undefined
{
    if global.turn_instance.is_dead and !ds_queue_empty(turn_queue)
    {
        if !ds_queue_empty(turn_queue)
        {
            global.turn_instance = ds_queue_dequeue(turn_queue)
        }
        else{global.turn_instance = undefined} 
    }
}
//턴 종료시 다음 차례가 있을때
if global.turn_instance = undefined and !ds_queue_empty(turn_queue)
{
    global.turn_instance = ds_queue_dequeue(turn_queue)
    
}
//턴종료시 다음 차례가 없을때
if global.turn_instance = undefined and ds_queue_empty(turn_queue)
{
    if !ds_list_empty(obj_GAME_SYSTEM_MANAGER.enemy_list)
    {
        instance_create(0,0,obj_battle_turn_manager)
    }
    instance_destroy()
}
//적이 모두 죽었을때
if slot_empty(obj_GAME_SYSTEM_MANAGER.enemy_list,5)
{
    instance_create(0,0,obj_battle_win_manager)
    instance_destroy()
}
//아군이 모두 죽었을떄
if slot_empty(obj_GAME_SYSTEM_MANAGER.player_list,5)
{
    instance_create(0,0,obj_battle_defeat_manager)
    instance_destroy()
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_turn_table_bar,0,view_xview+35,view_yview+view_hview/2)
draw_sprite(spr_turn_table_arrow,0,view_xview+90,view_yview+view_hview/2+45)

var sc = 0.25

for(var i = 0; i &lt; ds_list_size(spr_list); i++)
{
    draw_sprite_ext(spr_list[|i].card_portrait,0,
    35,view_yview+view_hview/2+45+((sprite_get_height(spr_list[|i].card_portrait)*sc+5)*i)
    ,sc,sc,0,c_white,1)
    var is_activate = 1
    if i = 0 {is_activate = 0}
    draw_sprite_ext(spr_turn_table_portrait_outline,is_activate,
    35,view_yview+view_hview/2+45+((sprite_get_height(spr_list[|i].card_portrait)*sc+5)*i)
    ,sc,sc,0,c_white,1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
