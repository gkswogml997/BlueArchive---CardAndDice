<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_platform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//보드 부속물에 추가 =
if instance_exists(obj_BOARD_MANAGER) {ds_list_add(obj_BOARD_MANAGER.board_parts_list,id)}

//자물쇠 애니메이션
if instance_number(obj_board_graph_vertex) &gt; 1 {instance_create(x,y,obj_lock_animation)}

g_edge = ds_list_create()
g_vertex = ds_list_create()

//버택스 타입 선언
type = choose(0,0,0,1,2,3,3,4,5,5)
is_can_move = false

//지도처리 관련
x_gap = 0
y_gap = 0

//드로우
image_xscale = 0.7
image_yscale = 0.7
image_alpha = 0

entrance = platform_type.Nothing
is_enter = false

notice_box_return = ""
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if is_can_move
{
    obj_player_piece.on_vertex = id
    if instance_exists(obj_board_move_arrow) {instance_destroy(obj_board_move_arrow)}
    obj_board_graph_vertex.is_can_move = false
}

/*str = "내 아이디:"+string(id)
str += "#연결된 버택스:"
for(var i = 0; i &lt; ds_list_size(g_vertex); i++)
{
    str += "#"+string(ds_list_find_value(g_vertex,i))
}
str += "#연결된 엣지:"
for(var i = 0; i &lt; ds_list_size(g_edge); i++)
{
    str += "#"+string(ds_list_find_value(g_edge,i))
}

show_message(str)*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if notice_box_return = "확인" {is_enter = true; notice_box_return = ""}
if notice_box_return = "취소" {create_next_vertex(); notice_box_return = "";}

//입장시
if instance_exists(obj_player_piece)
{
    if obj_player_piece.on_vertex = id
    {
        //버택스 타입에 따라 입장
        if type != platform_type.Nothing
        {
            switch type 
            { 
                case platform_type.Battle: 
                {
                    entrance = platform_type.Battle
                    make_notice_box("전투에 입장 합니다.",id,true)
                    break;
                }
                case platform_type.Cafe: 
                {
                    entrance = platform_type.Cafe
                    make_notice_box("카페에 입장 하시겠습니까?",id)
                    break;
                }
                case platform_type.Craft_chamber:
                {
                    entrance = platform_type.Craft_chamber
                    make_notice_box("크래프트 챔버에 입장 하시겠습니까?",id)
                    break;
                }
                case platform_type.Shop:
                {
                    entrance = platform_type.Shop
                    make_notice_box("엔젤 24시 편의점에 입장 하시겠습니까?",id)
                    break;
                }
                case platform_type.Formation:
                {
                    entrance = platform_type.Formation
                    make_notice_box("편성에 입장 하시겠습니까?",id)
                    break;
                }
                case platform_type.Recruit: 
                {
                    entrance = platform_type.Recruit
                    make_notice_box("학생 모집에 입장 하시겠습니까?",id)
                    break;
                }
            }
        }
        type = platform_type.Nothing
    }
}

draw_self()

//아이콘 그리기
if image_alpha &gt;= 1
{
    switch type 
    { 
        case platform_type.Battle : {draw_sprite(spr_platform_battle,0,x,y); break}
        case platform_type.Cafe : {draw_sprite(spr_platform_cafe,0,x,y); break}
        case platform_type.Craft_chamber : {draw_sprite(spr_platform_craft_chamber,0,x,y); break}
        case platform_type.Shop : {draw_sprite(spr_platform_shop,0,x,y); break}
        case platform_type.Formation : {draw_sprite(spr_platform_formation,0,x,y); break}
        case platform_type.Recruit : {draw_sprite(spr_platform_recruit,0,x,y); break}
    
    }
}else
{
    image_alpha += 0.02
}

//이동시
if is_enter
{
    switch entrance
    {
        case platform_type.Battle: {instance_create(0,0,obj_battle_enter_effect_manager); break;}
        case platform_type.Cafe: {instance_create(0,0,obj_CAFE_MANAGER); break;}
        case platform_type.Craft_chamber: {instance_create(0,0,obj_CRAFT_CHAMBER_MANAGER); break;}
        case platform_type.Shop: {instance_create(0,0,obj_SHOP_MANAGER); break;}
        case platform_type.Formation: {instance_create(0,0,obj_FORMATION_MANAGER); break;}
        case platform_type.Recruit: {instance_create(0,0,obj_RECRUIT_MANAGER); break;}
        
    }
    
    entrance = platform_type.Nothing
    is_enter = false
}

if mouse_enter() 
{
    var str = ""
    //버택스 타입에 따라 보여주기
    if type != platform_type.Nothing
    {
        switch type 
        { 
            case platform_type.Battle: 
            {
                str = "전투#이 노드에 입장시 그냥 지나 갈 수 없습니다."
                break;
            }
            case platform_type.Cafe: 
            {
                str = "카페#모집때 선택하지 않은 학생이나 #전투 중 쓰러진 학생을 다시 모집 할 수 있습니다."
                break;
            }
            case platform_type.Craft_chamber:
            {
                str = "크래프트 챔버#기동석을 사용해 스킬을 제작 할 수있습니다."
                break;
            }
            case platform_type.Shop:
            {
                str = "엔젤24 #학생들에게 장비를 구매하여 줄 수 있습니다."
                break;
            }
            case platform_type.Formation:
            {
                str = "편성 #학생들의 포지션, 장비, 스킬을 재설정 해줄 수 있습니다."
                break;
            }
            case platform_type.Recruit: 
            {
                str = "모집#학생을 한명 모집 할 수 있습니다."
                break;
            }
        }
        draw_set_valign(fa_center)
        draw_set_halign(fa_left)
        draw_set_font(ft_quick_log_font)
        draw_set_color(c_black)
        var str_w = string_width(str)
        var xx = mouse_x
        var yy = mouse_y
        draw_sprite(spr_platform_info_L,0,xx,yy)
        for(var i = 0; i &lt; str_w; i++)
        {
            draw_sprite(spr_platform_info,0,xx+i,yy)
        }
        draw_sprite(spr_platform_info_R,0,xx+str_w,yy)
        draw_text(xx,yy,str)
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
