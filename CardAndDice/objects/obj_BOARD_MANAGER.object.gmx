<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_system_invisible_object_sprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_all()
audio_play_sound(global.bgm_board,1001,false)

//보드 부속물 리스트
board_parts_list = ds_list_create()

//그리드 크기관련
room_width = global.board_width
room_height = global.board_height

grid_width = room_width div CELL_WIDTH
grid_height = room_height div CELL_HEIGHT

//그리드 선언
board_graph_grid = ds_grid_create(grid_width,grid_height)
ds_grid_clear(board_graph_grid,undefined)

//최소 가중치 엣지 모음
min_weight_edge = ds_list_create()

//배경
instance_create(x,y,obj_board_bg)

//플랫폼
var xx = room_width/2 div CELL_WIDTH;
var yy = room_height/2 div CELL_HEIGHT;
board_graph_grid[# xx,yy] = instance_create(xx*CELL_WIDTH+CELL_WIDTH/2,yy*CELL_HEIGHT+CELL_HEIGHT/2,obj_board_graph_vertex)
board_graph_grid[# xx,yy].is_under_player = true
//(구) 보드 생성 알고리즘

/*
//최대 버택스 수
max_vertex = 150

//버텍스 랜덤 위치에 뿌리기
while(true)
{
    var xx = (grid_width-grid_height)/2+irandom(grid_height-1);
    var yy = irandom(grid_height-1);
    
    //좌표가 원형 범위 안에 있는지 확인
    if sqr((grid_height-4)/2) &gt;= (sqr(grid_width/2 - xx)+sqr(grid_height/2 - yy))
    {
        if board_graph_grid[# xx,yy] = undefined
        {
            board_graph_grid[# xx,yy] = instance_create(xx*CELL_WIDTH+CELL_WIDTH/2,yy*CELL_HEIGHT+CELL_HEIGHT/2,obj_board_graph_vertex)
            max_vertex--
        }
        if max_vertex &lt;= 0 {break}
    }
}

//모든 버텍스 끼리 엣지 연결
for(var xx = 0; xx &lt; grid_width; xx++)
{
    for(var yy = 0; yy &lt; grid_height; yy++)
    {
        if board_graph_grid[# xx,yy] != undefined
        {
            var i = 2
            while(true)
            {
                target = instance_nth_nearest(board_graph_grid[# xx,yy].x,board_graph_grid[# xx,yy].y,obj_board_graph_vertex,i)
                if instance_exists(target)
                {
                    if ds_list_find_index(board_graph_grid[# xx,yy].g_vertex,target) = -1 {instance_create_v(0,0,obj_board_graph_edge,board_graph_grid[# xx,yy],target)}
                }else {break;}
                i++
                if i &gt; instance_number(obj_board_graph_vertex) {break;}
            }
        }
    }
}

//프림 알고리즘
for(var xx = 0; xx &lt; grid_width; xx++)
{
    for(var yy = 0; yy &lt; grid_height; yy++)
    {
        if board_graph_grid[# xx,yy] != undefined
        {
            var min_weight = board_graph_grid[# xx,yy].g_edge[| 0].weight
            var min_edge = board_graph_grid[# xx,yy].g_edge[| 0]
            for (var i = 0; i &lt; ds_list_size(board_graph_grid[# xx,yy].g_edge); i++)
            {
                if min_weight &gt; board_graph_grid[# xx,yy].g_edge[| i].weight and ds_list_find_index(min_weight_edge,board_graph_grid[# xx,yy].g_edge[| i]) = -1
                {
                    min_weight = board_graph_grid[# xx,yy].g_edge[| i].weight
                    min_edge = board_graph_grid[# xx,yy].g_edge[| i]
                }
            }
            var temp_target1 = min_edge.vertex_1
            var temp_target2 = min_edge.vertex_2
            var i_max = ds_list_size(board_graph_grid[# xx,yy].g_edge)
            for (var i = 0; i &lt; i_max; i++)
            {
                if ds_list_find_index(min_weight_edge,board_graph_grid[# xx,yy].g_edge[| 0]) = -1 {instance_destroy(board_graph_grid[# xx,yy].g_edge[| 0])}
            }
            ds_list_add(min_weight_edge,instance_create_v(0,0,obj_board_graph_edge,temp_target1,temp_target2))
            
        }
    }
}
*/

//플레이어 말 생성
instance_create(0,0,obj_player_piece)

//카오스모드 버튼 생성
if global.chaos_mode 
{
    instance_create(0,0,obj_chaos_mode_menu_bar)
}

board_inventory = ds_list_create()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if view_wview &lt; global.board_width and !obj_camera.camera_lock
{
    view_wview += 128
    view_hview += 72
    view_hborder[0] = view_wview/2
    view_vborder[0] = view_hview/2
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if view_wview &gt; global.minimun_resolution_width and !obj_camera.camera_lock
{
    view_wview -= 128
    view_hview -= 72
    view_hborder[0] = view_wview/2
    view_vborder[0] = view_hview/2
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if UI_disable()
{
    draw_set_font(ft_gyeonggi_sz17_Bold_NO)
    draw_set_halign(fa_left)
    draw_set_valign(fa_middle)
    draw_set_colour(c_black)
    
    draw_sprite(spr_tool_bar_bg,0,640,0)
    draw_sprite_ext(spr_bluestone,0,640+100,24,0.4,0.4,0,c_white,1)
    draw_text(640+116,26,string(global.blue_stone))
    draw_sprite_ext(spr_craftstone,0,640+300,24,0.4,0.4,0,c_white,1)
    draw_text(640+316,26,string(global.craft_stone))
    
    draw_set_font(ft_quick_log_font)
    draw_set_halign(fa_left)
    draw_set_valign(fa_middle)
    draw_set_colour(c_black)
    
    if global.chaos_mode {draw_sprite(spr_strategic1,1,0,80)}
    else {draw_sprite(spr_strategic1,0,0,80)}
    draw_sprite(spr_strategic2,0,0,120)
    draw_text(0,170,"진행도:"+string(global.passing_node))
    if global.chaos_mode 
    {
        draw_text(0,200,"적이 무작위 조합과 무작위 스텟을 가집니다.");
        draw_text(0,230,"제조에서 모든 스킬카드가 등장합니다.");
    }
    else
    {
        switch global.progress
        {
            case 0: {draw_text(0,200,"상점에서 2T 이하 장비가 등장합니다.");break;}
            case 1: {draw_text(0,200,"상점에서 3T 장비가 등장합니다.");break;}
            case 2: {draw_text(0,200,"상점에서 4T 장비가 등장합니다.");break;}
            default: 
            {
                draw_text(0,200,"다음 전투에서 총력전 보스가 등장합니다.")
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
